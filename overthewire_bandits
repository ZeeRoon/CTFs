Bandits Wargame

Commands you may need to solve these levels
ls, cd, cat, file, du, find, grep

Level 0
loginned via bandit0 and bandit0
ls for locating file in the current directory
found readme file
cat readme gave boJ9jbbUNNfktd78OOpsqOltutMc3MY1 which is password for next level bandit1

Level 1
ls gave a file named -
we can open it via cat ./- or any other operation with other commands we have to use -- or even we can use cat < -
it gave the password for level bandit2
CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9

level 2
upon ls a file is there called
spaces in this filename
yeah literally, so we have to open it we can open it by using "" or ' '
or use \ between the every spaced letter
so after cat "spaces in this filename", it gave
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK for bandit3

Level 3
we got a directory named in here upon ls
cd inhere and ls gave nothing but since the level suggested it has a hidden filename
ls -la gave .hidden file
cat .hidden gave 
pIwrPrtPN36QITSp3EQaw936yaFoFgAB for bandit4

level 4
upon ls gave inhere directory, on cd to it, it gave 9 files with -file00 to 09 series
cat on first file gave bizzare output, since the intro to level gave that the password is in a human readable
so we can either check each of them and clearing our screen if it messed up but there is also a better way
file is a command which can be used for seeing file type, now we have to list all the files with type in single command
file * gave error as the name starts with - so we have to do
file -- *
which will list all the types
-file00: data
-file01: data
-file02: data
-file03: data
-file04: data
-file05: data
-file06: data
-file07: ASCII text
-file08: data
-file09: data
here file 7 is readable which gave
koReBOKuIDDepwhWk7jZC0RTdopnAYKh for bandit5

level 5
the guide says the file has these properties:
human-readable
1033 bytes in size
not executable
upon ls, a directory inhere with many subdirectories maybeinhere found, which further contained many other files with spaced, dot, - names in naming
we can use ls * -lh and analyze the file size nearest 1.(something)K but we have to do this manaully, so I found find command with -size parameter will
shorten our search process, I simply searched
find ./ -size 1033c (c for bytes)
which gave
./maybehere07/.file2
upon file on it, it gave 
./maybehere07/.file2: ASCII text, with very long lines
cat gives 
DXjZPULLxYr17uwoI01bNLQbtFemEgo7 with long spaces, tried for bandit6 and it worked :)

Level 6
the guide says the file has these properties:
owned by user bandit7
owned by group bandit6
33 bytes in size
so, ls gave nothing, neither ls -la
so maybe the file is under / and not in the current user directory
found out find command has parameters to search files for groups, users and size
so,
find / -size 33c -group bandit6 -user bandit7
gave long list of permission denied except
/var/lib/dpkg/info/bandit7.password
which upon cat gave
HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs for bandit7

Commands you may need to solve these levels
grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd

level 7
The guide or level goal says
The password for the next level is stored in the file data.txt next to the word millionth
so
ls gave data.txt on present working directory
then
grep millionth data.txt gave
millionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV for bandit8

Level 8
The level goal says
The password for the next level is stored in the file data.txt and is the only line of text that occurs only once
so we have given a file with random keywords like the Flag we have to find, all contains duplicate but at random position
so upon simple 
uniq data.txt it didn't work as uniq work when the duplicates are sequential so for that we have to sort them like
sort data.txt | uniq -u (-u for find only uniq)
which gave
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR for bandit9

Level 9
The level goal says
The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.
so, 
we use strings command, we see different readable output but to narrow down, we have to pipe to grep with multiple = characters we use only two == like 
strings -d data.txt | grep ==
bingo we found something
========== the*2i"4
========== password
Z)========== is
&========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
the last line characters looks like a password
so truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk is for bandit10

Level 10
The level goal says
The password for the next level is stored in the file data.txt, which contains base64 encoded data
so we have a tool called base64 which decodes or encodes in base64, so upon decode
base64 -d data.txt, it gives
The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR 
which is the password for bandit11

Level 11
The level goal says
The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions
since as goal says its a rot13, then we have to rotate the keys or translate the cipher, for that we have a tool tr for translating multiples sets
we will be piping the output of the data.txt to tr and translating chars with sets that is [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] to 
[nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM], in the tools parameter theres a different usage, it uses A-Z for all uppercase characters A to Z 
so likewise we will do
cat data.txt | tr -t [a-zA-Z] [n-za-mN-ZA-M] 
which will translate every a-z and A-Z character with N-Z, A-M and n-z, a-m
which will give us 
The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu
which is password for bandit 12

Level 12
The level goal says
The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may 
be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and 
rename it using mv (read the manpages!)
created a folder at /tmp/
moved data.txt there
upon checking file type it showed simple file but as the description says its a dump file then we have to undump it, for which we will use xxd
xxd -r data.txt > undump
will give us the undumped file
again upon file checking it showed this
gzip compressed data, was "data2.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
so this is a gzip file repeatedly compressed
upon inspecting the gzip manual and multiple tries (it was giving unknown suffix) I found that zcat is actually doing something
zcat undump > undump2
and upon file type check it showed
bzip2 compressed data, block size = 900k
ok now we have to use bzip2, inspecting man pages :)
well 
bzip2 -d2 undump2
did the trick (-d for decompress and -2 for block size 900k)
but output was saved to undump2 due to unknown suffix or I should have used a flag :(
again check file type 
found again a gzip file
zcated it again and saved it in undump3
again checking file type revealed it as POSIX tar archive (what the F.....)
okay now looking for tar man pages .....
tar --extract -f undump3 did the trick
new file with data5.bin is shown
again its POSIX tar (F.....)
again untaring it got me data6.bin which is a bzip2 compressed file :`O
bzip gave me data6.bin.out again and its a POSIX tar (haaaaaa!!!!!)
untarring gave data8.bin which is a gzip file :===( originally data9.bin
zcat gave data9.bin and finally its a text
which says
The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
which is password for bandit13
yeaaaaah!!!

For these level these commands will be used
ssh, telnet, nc, openssl, s_client, nmap

Level 13:
the goal says
The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next 
password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are 
working on

upon reading the manuals of openssl and s_client, it is found that we can use the private key to connect to a pc if it is setup. so we got the private key
now just find a way to connect the same local host with different user (bandit14) as only bandit14 is able to read its password.
upon trying and failing with different switches and options found that
openssl s_client -connect 127.0.0.1:22 -key sshkey.private 
gives something like
CONNECTED(00000003)
140227959418944:error:1408F10B:SSL routines:ssl3_get_record:wrong version number:../ssl/record/ssl3_record.c:252:
---
no peer certificate available
---
No client certificate CA names sent
---
SSL handshake has read 5 bytes and written 176 bytes
Verification: OK
---
New, (NONE), Cipher is (NONE)
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : 0000
    Session-ID:
    Session-ID-ctx:
    Master-Key:
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    Start Time: 1653573278
    Timeout   : 7200 (sec)
    Verify return code: 0 (ok)
    Extended master secret: no
---

but it disconnects immediately and we have to find the way to issue commands
so I just found out that ssh command offers a -i switch that can be used to use private keys to connect
so
ssh -i sshkey.private bandit14@127.0.0.1 -p 22
port 22 as it is open internally, checked via nmap, 2220 doesn't work it is for firewall redirecting it to bandit (I think)
so we are in with bandit14 user
cat /etc/bandit_pass/bandit14
gave
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
which is password for bandit14

Level 14:
the goal says
The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.

okay we can connect with ports or ips and send files via telnet or nc, lets try manuals
tried nc -l -p 30000 -c 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
-c to execute the string which is password and -l to listen anything but it stuck
tried the localhost 127.0.0.1 no result 
ommitting -l switch gave no destination, and no port to connect
tried 
 nc -p 30000 -c echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e 127.0.0.1
 but it says 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e: forward host lookup failed: No address associated with name
so I think I have to pipe the echo command
echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3enc | nc -p 30000
says no destination
echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3enc | nc  127.0.0.1 30000
says: Wrong! Please enter the correct current password
shit!!!!
I have been using the wrong password (me, slap on my head!!!)
 echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e | nc  127.0.0.1 30000  
gave 
Correct!
BfMYroe26WYalil77FoDi9qh59eK5xNr
which is password for next level bandit15

Level 15:
the goal says
The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.
Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, 
the ‘B’ command also works in this version of that command…

well on reading the wiki pages and understanding the concept and on looking the manuals, just remembered I tried connecting via ssl in previous levels
then connecting again
echo BfMYroe26WYalil77FoDi9qh59eK5xNr | openssl s_client -connect 127.0.0.1:30001
but it showed server certificate and keys and closed the connection 
oh yeah the -ign_eof switch 
echo BfMYroe26WYalil77FoDi9qh59eK5xNr | openssl s_client -connect 127.0.0.1:30001 -ign_eof
did the trick, showed the same message as before but at the last few lines

Correct!
cluFn7wTiGryunymYOu4RcffSxQluehd

closed

so cluFn7wTiGryunymYOu4RcffSxQluehd is the password for bandit16

Level 16:

The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. 
First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don’t. There is only 1 server that 
will give the next credentials, the others will simply send back to you whatever you send to it.

so
nmap -p 31000-32000 127.0.0.1 -> gave

Starting Nmap 7.40 ( https://nmap.org ) at 2022-05-27 14:21 CEST
Nmap scan report for localhost (127.0.0.1)
Host is up (0.00043s latency).
Not shown: 996 closed ports
PORT      STATE    SERVICE
31046/tcp open     unknown
31518/tcp filtered unknown
31691/tcp open     unknown
31790/tcp open     unknown
31960/tcp open     unknown

so now finding SSL ports
tested each port via
openssl s_client -connect 127.0.0.1:[port]
only 31790 showed a certificate others just connected and disconnected.
so
echo cluFn7wTiGryunymYOu4RcffSxQluehd | openssl s_client -connect 127.0.0.1:31790 
gave the same thing (certificate of client) as before without sending anything
but 
echo cluFn7wTiGryunymYOu4RcffSxQluehd | openssl s_client -connect 127.0.0.1:31790 -ign_eof
gave a private key at the last

Correct!
-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----

so no password amigo???
the goal says, next credientials, so I guess, this is it.
so we have to connect to the local host by sending the file as before but we first have to output the returned output to a file.
echo cluFn7wTiGryunymYOu4RcffSxQluehd | openssl s_client -connect 127.0.0.1:31790 -quiet -msgfile key.private
gives the plain key but with other info as well so lets go with traditional method of copy pasting and saving it to a file (key.private)
created it at /tmp/directoryname as we cannot create anywhere else

used
ssh -i key.private bandit17@127.0.0.1 -p 22
but it gave error that the private key is too open (permissions) for other users so ignoring it.
we need to change the permission, 
chmod 400 key.private
so that only bandit16 can read it.
now trying again with
ssh -i key.private bandit17@127.0.0.1 -p 22
oh yess we are in bandit17
now 
cat /etc/bandit_pass/bandit17
gave -> xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn
which is password for bandit17

the following commands or tools will be used to complete these languages
cat, grep, ls, diff

Level 17:
There are 2 files in the homedirectory: passwords.old and passwords.new. The password for the next level is in passwords.new and is the only line that 
has been changed between passwords.old and passwords.new

NOTE: if you have solved this level and see ‘Byebye!’ when trying to log into bandit18, this is related to the next level, bandit19

so the diff command do the difference between files and folders
trying simple usage
diff passwords.new passwords.old 
gives

42c42
< kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
---
> w0Yfolrc5bwjS4qw5mq1nnQi6mF03bii

so the < maybe shows the difference in first file assuming
after testing we got into bandit18 but it says bye! and connection closes everytime try to login so its connected to next level.
so kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd is password for level 18

Level 18:
the level goal says:
The password for the next level is stored in a file readme in the homedirectory. Unfortunately, someone has modified .bashrc to log you out when you log 
in with SSH.

so ssh command comes with an option it can directly run commands when connects
since we know the password is in readme file in home directory but lets try out
ssh bandit18@bandit.labs.overthewire.org -p 2220 ls
so it shows
readme
a file
ssh bandit18@bandit.labs.overthewire.org -p 2220 -N cat readme
shows
IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x
which is password for next round

Level 19:
the goal says:
To gain access to the next level, you should use the setuid binary in the homedirectory. Execute it without arguments to find out how to use it. The 
password for this level can be found in the usual place (/etc/bandit_pass), after you have used the setuid binary.

so there are files permission flags namely setuid (for users) and setgid (for groups) they can be used to restrict users and groups from accessing files
but some software needs specific permissions (not all) for that custom binaries or permissions are made
so we got a binary that can execute commands as bandit20 so the password for bandit20 is in /etc/bandit_pass/bandit20
lets do
./bandit20-do cat /etc/bandit_pass/bandit20
voila!!! got
GbKksEFF4yrVs6il55v6gwY5aVje5f0j
which is password for Level 20

commands to complete these levels in
ssh, nc, cat, bash, screen, tmux, Unix ‘job control’ (bg, fg, jobs, &, CTRL-Z, …)

Level 20:
the goal says:
There is a setuid binary in the homedirectory that does the following: it makes a connection to localhost on the port you specify as a commandline 
argument. It then reads a line of text from the connection and compares it to the password in the previous level (bandit20). If the password is correct,
it will transmit the password for the next level (bandit21).

NOTE: Try connecting to your own network daemon to see if it works as you think

so we got a setuid binary that connects to a port and ask for current password and returns the next level.
tried connecting with default tcp port 443 but it did not respond, it stuck....
did a nmap to scan for available ports 
tried connecting with all but nothing, it stuck again.
...
multiple tries but nothing....
found an article :(.
so the thing is we have to specify a port ourselve which we will let the machine to listen via netcat

so 
echo "GbKksEFF4yrVs6il55v6gwY5aVje5f0j" | nc -lp 1234 &
and then connect with
./suconnect 1234
and enter the password 
it will return

gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
that is the password for level 21

The commands to solve these level
cron, crontab, crontab(5) (use “man 5 crontab” to access this)

Level 21:
the goal says:
A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what 
command is being executed.

so lets check the cron jobs
ls /etc/cron.d/
it shows 
cronjob_bandit15_root  cronjob_bandit17_root  cronjob_bandit22  cronjob_bandit23  cronjob_bandit24  cronjob_bandit25_root
so there is a cronjob for bandit22 (the next level)
lets check what it does
cat /etc/cron.d/cronjob_bandit22
it showed
@reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null

so apparently, it runs a script at every time it reboots but outputs anything to the void
lets check what does the script does 

cat /usr/bin/cronjob_bandit22.sh
it showed 

#!/bin/bash
chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

so theres a file in /tmp which contains a file containing password which will be fetch the password and overwrite it???
lets run it.
well, we don't have permisisons but lets access the file
cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
it gave
Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI
that must be the password for next level

Level 22:
the goal says
A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what 
command is being executed.

NOTE: Looking at shell scripts written by other people is a very useful skill. The script for this level is intentionally made easy to read. If you are 
having problems understanding what it does, try executing it to see the debug information it prints.

so we got the similar challenge here
lets check whats in /etc/cron.d/ again
as checked, we have
cronjob_bandit15_root  cronjob_bandit17_root  cronjob_bandit22  cronjob_bandit23  cronjob_bandit24  cronjob_bandit25_root
lets check what script does cronjob_bandit23
cat /etc/cron.d/cronjob_bandit23
it showed
@reboot bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null
* * * * * bandit23 /usr/bin/cronjob_bandit23.sh  &> /dev/null

so  lets check the script

cat /usr/bin/cronjob_bandit23.sh
#!/bin/bash

myname=$(whoami)
mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f 1)

echo "Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget"

cat /etc/bandit_pass/$myname > /tmp/$mytarget

so the scripts simply use mytarget variable (which uses whoami variable so we have to change it to bandit23) and creates md5 checksum for naming the file name, which is used for accessing the next level password
and saving it in the file. wow!

so lets first start by doing
myname=bandit23
echo I am user $myname | md5sum | cut -d ' ' -f 1

which will give us

8ca319486bfbbc3663ea0fbe81326349

now lets access it in tmp file

cat /tmp/8ca319486bfbbc3663ea0fbe81326349
jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n --> which is password for next level


Level 23:
the goal says:
A program is running automatically at regular intervals from cron, the time-based job scheduler. Look in /etc/cron.d/ for the configuration and see what
command is being executed.

NOTE: This level requires you to create your own first shell-script. This is a very big step and you should be proud of yourself when you beat this 
level!

NOTE 2: Keep in mind that your shell script is removed once executed, so you may want to keep a copy around…

okay another similar one lets look whats inside the cron job
cat /etc/cron.d/cronjob_bandit24
gives
@reboot bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
* * * * * bandit24 /usr/bin/cronjob_bandit24.sh &> /dev/null
now the script
cat /usr/bin/cronjob_bandit24.sh
gives
#!/bin/bash

myname=$(whoami)

cd /var/spool/$myname
echo "Executing and deleting all scripts in /var/spool/$myname:"
for i in * .*;
do
    if [ "$i" != "." -a "$i" != ".." ];
    then
        echo "Handling $i"
        owner="$(stat --format "%U" ./$i)"
        if [ "${owner}" = "bandit23" ]; then
            timeout -s 9 60 ./$i
        fi
        rm -f ./$i
    fi
done

so the script runs other scriptes in /var/spool/bandit13 after every 60 seconds, 
so what we will do ??
we will write a script to copy password for us
and since only that user can run it, we will copy it to the spool folder bandit24 which will run after a minute
and we will grab it
lets do this,
since the home directory doesn't allow us to create something lets head to /tmp and create a folder with a file
cd /tmp
mkdir zeeroonhere
cd zeeroonhere
touch test
nano test

then add this

#! /bin/bash

cat /etc/bandit_pass/bandit24 > /tmp/zeeroonhere/test

save it and copy it to /var/spool/bandit24 and wait for a minute and then cat the file in /tmp/zeeroonhere/test
oh sorry, before copying just change permission to 777 so everyone can execute it :)

cat test
voila 
UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ --> password for bandit24 :)

Level 24:
the goal says:
A daemon is listening on port 30002 and will give you the password for bandit25 if given the password for bandit24 and a secret numeric 4-digit pincode. 
There is no way to retrieve the pincode except by going through all of the 10000 combinations, called brute-forcing.

oooh so no guide to use which tools nice...
lets try something
so lets create a script which sends echo commands multiple times with netcat piping

#! /bin/bash

for i in for {0000...9999}; do
        echo "UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ $i"
done | nc 127.0.0.1 30002 

but the thing is it stuck at first try
tried sleep command but didn't work
tried nc -q switch ... didn't work
now instead of doing everything in one script lets break it
first outputing the bruteforce keys to a file then output the keys to nc
lets try

#! /bin/bash

for i in for {0000...9999}; do
        echo "UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ $i"
done

./bruteforce.sh > bruteforce.txt

tried stupidiest thing ever :P
cat bruteforce.txt | nc localhost 30002

slap on the head again!!!!

bruteforce.txt is not the way I wanted :X
the loop is not working X(
lets correct it first

#! /bin/bash

for i in {0000..9999}; 
do
        echo "UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ $i"
done

:P
now its fine
nc localhost 30002 < bruteforce.txt now it worked and gave
uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG which is passwd for bandit25 
blooper (even cat bruteforce.txt | nc localhost 30002 worked which I thought is just a mistake) X{

tools used to solve these levels
ssh, cat, more, vi, ls, id, pwd

Level 25:
the goal says:
Logging in to bandit26 from bandit25 should be fairly easy… The shell for user bandit26 is not /bin/bash, but something else. Find out what it is, how 
it works and how to break out of it.

so upon ls 
found that there is a ssh key which is probably be for next level, so lets connect
ssh -i bandit26.sshkey bandit26@localhost
so we are in but it disconnected automatically
tried piping ssh to vi, more but no work
even tried with directly executing command but it got stuck
tried everything but could not did it so I used lifeline and checked for answer 
basically we have to check the shells they are running so 
cat /etc/passwd | grep bandit26 -> gives shell info on bandit26
bandit26:x:11026:11026:bandit level 26:/home/bandit26:/usr/bin/showtext
cat /etc/passwd | grep bandit25 -> gives shell info on bandit25
bandit25:x:11025:11025:bandit level 25:/home/bandit25:/bin/bash

so bandit26 uses a script called showtest
let us check whats inside 
cat /usr/bin/showtext
#!/bin/sh

export TERM=linux

more ~/text.txt
exit 0

so it opens more command which is just a reader limiting you ouput scaled to your screen with some control
the trick is to think out of the box, resize the terminal too small and try agian

ssh -i bandit26.sshkey bandit26@localhost
now we got something like more (some percentage)
now resize
type v we will go to vim editor
from there we can open another files, what about the password for in /etc/bandit_pass/bandit26
so 
:e /etc/bandit_pass/bandit26
it will open and give us

5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z
which is password for bandit26

Level 27:
the goal says
Good job getting a shell! Now hurry and grab the password for bandit27!

oh yass the bandit26 uses some non standard shell or as we know a custom script so lets do what we did and open vim as we did before
now that we got into vim, theres a command in vim which let it run a shell
:shell
so it is redirecting us to the same thing the text bandit26 or text.txt file
okay since the shell is set to /usr/bin/text.txt maybe thats why
so in vim 
:set shell=/bin/bash
then 
:shell
this will get us into a shell
upon ls we have a setuid binary file for bandit27 so we will fetch its password with it
./bandit27-do cat /etc/bandit_pass/bandit27

3ba3118a22e93127a4ed485be72ef5ea
which is password for bandit27

These tools will be used to complete the level
git

Level 28:
the level goal says:
There is a git repository at ssh://bandit27-git@localhost/home/bandit27-git/repo. The password for the user bandit27-git is the same as for the user 
bandit27.

Clone the repository and find the password for the next level.

so we have got a repository in localhost using git. but accessing directly /home/bandit27-git/repo, we don't have permission
so we have to clone the repo to somewhere, since we can't even create anything at home directory too </3
so lets go to /tmp and create a directory there and cd into it,
then 
git clone ssh://bandit27-git@localhost/home/bandit27-git/repo
cd repo
ls
gives
README
upon cat
0ef186ac70e04ea33b4c1853d2526fa2
which is password for bandit28

Level 28:
the goal says
There is a git repository at ssh://bandit28-git@localhost/home/bandit28-git/repo. The password for the user bandit28-git is the same as for the user 
bandit28.

Clone the repository and find the password for the next level.

so, same create tmp directory in /tmp cd in it,
clone it,
we will get a README.md but upon cat it shows

# Bandit Notes
Some notes for level29 of bandit.

## credentials

- username: bandit29
- password: xxxxxxxxxx

so there's no password here, lets check if there's something in the logs

git log
shows

commit edd935d60906b33f0619605abd1689808ccdd5ee
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    fix info leak

commit c086d11a00c0648d095d04c089786efef5e01264
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    add missing data

commit de2ebe2d5fd1598cd547f4d56247e053be3fdc38
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    initial commit of README.md

so there's fix info and add missing data commits 
now there's a switch which shows specific and all the changes in the file, so lets see all
git log -p
shows

commit edd935d60906b33f0619605abd1689808ccdd5ee
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    fix info leak

diff --git a/README.md b/README.md
index 3f7cee8..5c6457b 100644
--- a/README.md
+++ b/README.md
@@ -4,5 +4,5 @@ Some notes for level29 of bandit.
 ## credentials
 
 - username: bandit29
-- password: bbc96594b4e001778eee9975372716b2
+- password: xxxxxxxxxx
 

commit c086d11a00c0648d095d04c089786efef5e01264
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200
index 3f7cee8..5c6457b 100644
--- a/README.md
+++ b/README.md
@@ -4,5 +4,5 @@ Some notes for level29 of bandit.
 ## credentials
 
 - username: bandit29
-- password: bbc96594b4e001778eee9975372716b2
+- password: xxxxxxxxxx
 

commit c086d11a00c0648d095d04c089786efef5e01264
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    add missing data

diff --git a/README.md b/README.md
index 7ba2d2f..3f7cee8 100644
--- a/README.md
+++ b/README.md
@@ -4,5 +4,5 @@ Some notes for level29 of bandit.
 ## credentials
 
 - username: bandit29
-- password: <TBD>
+- password: bbc96594b4e001778eee9975372716b2
 

commit de2ebe2d5fd1598cd547f4d56247e053be3fdc38
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:49 2020 +0200

    initial commit of README.md

diff --git a/README.md b/README.md

so we got bbc96594b4e001778eee9975372716b2 which is password for bandit29

LEVEL 29:
the goal says
There is a git repository at ssh://bandit29-git@localhost/home/bandit29-git/repo. The password for the user bandit29-git is the same as for the user 
bandit29.

Clone the repository and find the password for the next level.

ok, done with cloning
checking the README.md file
it says
# Bandit Notes
Some notes for bandit30 of bandit.

## credentials

- username: bandit30
- password: <no passwords in production!>

so the production ring some bells, I have heard and researched that developers practice to not save password in the production environment 
they use APIs for them and for testing they use different branches to save and test the system with saved passwords.
now lets see what branches do we have 

git branches -r # the -r switch shows all the remote-tracking branches
it shows
origin/HEAD -> origin/master
origin/dev
origin/master
origin/sploits-dev

so its using master branch, but there's other too,
lets check out dev
for that
git checkout dev
then let see the logs

git log

commit bc833286fca18a3948aec989f7025e23ffc16c07
Author: Morla Porla <morla@overthewire.org>
Date:   Thu May 7 20:14:52 2020 +0200

    add data needed for development

commit 8e6c203f885bd4cd77602f8b9a9ea479929ffa57
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:51 2020 +0200

    add gif2ascii

commit 208f463b5b3992906eabf23c562eda3277fea912
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:51 2020 +0200

    fix username

commit 18a6fd6d5ef7f0874bbdda2fa0d77b3b81fd63f7
Author: Ben Dover <noone@overthewire.org>
Date:   Thu May 7 20:14:51 2020 +0200

    initial commit of README.md


so we should have password in this branch (add data needed for development)

cat README.md
shows

# Bandit Notes
Some notes for bandit30 of bandit.

## credentials

- username: bandit30
- password: 5b90576bedb2cc04c86a9e924ce42faf

so the password for bandit30 is 


LEVEL 30:
the goal says:
There is a git repository at ssh://bandit30-git@localhost/home/bandit30-git/repo. The password for the user bandit30-git is the same as for the user 
bandit30.

Clone the repository and find the password for the next level.
done with the tmp directory and cloning
now cat README.md
just an epmty file... muahaha
:D XD
okay, so lets check with the logs,
nothing... here
so what about branches,
no other branches... :(
couldn't find anything lets check the others guide

so we have to check into the .git repo
there will be a tag in packed-refs
catting it will give us
now confirming the tag 
we use 
git tag
which will say 
secret
upon accessing the secret object via
git show secret we will get 
47e603bb428404d265f59c42920d81e5
which is the password for bandit30

LEVEL 31:
the goal says:
There is a git repository at ssh://bandit31-git@localhost/home/bandit31-git/repo. The password for the user bandit31-git is the same as for the user 
bandit31.

Clone the repository and find the password for the next level.

again done with creating tmp directory and cloning
so 
cat README.md 

showed 

This time your task is to push a file to the remote repository.

Details:
    File name: key.txt
    Content: 'May I come in?'
    Branch: master























