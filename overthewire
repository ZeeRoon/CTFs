Bandits Wargame

Commands you may need to solve these levels
ls, cd, cat, file, du, find, grep

Level 0
loginned via bandit0 and bandit0
ls for locating file in the current directory
found readme file
cat readme gave boJ9jbbUNNfktd78OOpsqOltutMc3MY1 which is password for next level bandit1

Level 1
ls gave a file named -
we can open it via cat ./- or any other operation with other commands we have to use -- or even we can use cat < -
it gave the password for level bandit2
CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9

level 2
upon ls a file is there called
spaces in this filename
yeah literally, so we have to open it we can open it by using "" or ' '
or use \ between the every spaced letter
so after cat "spaces in this filename", it gave
UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK for bandit3

Level 3
we got a directory named in here upon ls
cd inhere and ls gave nothing but since the level suggested it has a hidden filename
ls -la gave .hidden file
cat .hidden gave 
pIwrPrtPN36QITSp3EQaw936yaFoFgAB for bandit4

level 4
upon ls gave inhere directory, on cd to it, it gave 9 files with -file00 to 09 series
cat on first file gave bizzare output, since the intro to level gave that the password is in a human readable
so we can either check each of them and clearing our screen if it messed up but there is also a better way
file is a command which can be used for seeing file type, now we have to list all the files with type in single command
file * gave error as the name starts with - so we have to do
file -- *
which will list all the types
-file00: data
-file01: data
-file02: data
-file03: data
-file04: data
-file05: data
-file06: data
-file07: ASCII text
-file08: data
-file09: data
here file 7 is readable which gave
koReBOKuIDDepwhWk7jZC0RTdopnAYKh for bandit5

level 5
the guide says the file has these properties:
human-readable
1033 bytes in size
not executable
upon ls, a directory inhere with many subdirectories maybeinhere found, which further contained many other files with spaced, dot, - names in naming
we can use ls * -lh and analyze the file size nearest 1.(something)K but we have to do this manaully, so I found find command with -size parameter will
shorten our search process, I simply searched
find ./ -size 1033c (c for bytes)
which gave
./maybehere07/.file2
upon file on it, it gave 
./maybehere07/.file2: ASCII text, with very long lines
cat gives 
DXjZPULLxYr17uwoI01bNLQbtFemEgo7 with long spaces, tried for bandit6 and it worked :)

Level 6
the guide says the file has these properties:
owned by user bandit7
owned by group bandit6
33 bytes in size
so, ls gave nothing, neither ls -la
so maybe the file is under / and not in the current user directory
found out find command has parameters to search files for groups, users and size
so,
find / -size 33c -group bandit6 -user bandit7
gave long list of permission denied except
/var/lib/dpkg/info/bandit7.password
which upon cat gave
HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs for bandit7

Commands you may need to solve these levels
grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd

level 7
The guide or level goal says
The password for the next level is stored in the file data.txt next to the word millionth
so
ls gave data.txt on present working directory
then
grep millionth data.txt gave
millionth       cvX2JJa4CFALtqS87jk27qwqGhBM9plV for bandit8

Level 8
The level goal says
The password for the next level is stored in the file data.txt and is the only line of text that occurs only once
so we have given a file with random keywords like the Flag we have to find, all contains duplicate but at random position
so upon simple 
uniq data.txt it didn't work as uniq work when the duplicates are sequential so for that we have to sort them like
sort data.txt | uniq -u (-u for find only uniq)
which gave
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR for bandit9

Level 9
The level goal says
The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.
so, 
we use strings command, we see different readable output but to narrow down, we have to pipe to grep with multiple = characters we use only two == like 
strings -d data.txt | grep ==
bingo we found something
========== the*2i"4
========== password
Z)========== is
&========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
the last line characters looks like a password
so truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk is for bandit10

Level 10
The level goal says
The password for the next level is stored in the file data.txt, which contains base64 encoded data
so we have a tool called base64 which decodes or encodes in base64, so upon decode
base64 -d data.txt, it gives
The password is IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR 
which is the password for bandit11

Level 11
The level goal says
The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions
since as goal says its a rot13, then we have to rotate the keys or translate the cipher, for that we have a tool tr for translating multiples sets
we will be piping the output of the data.txt to tr and translating chars with sets that is [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ] to 
[nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM], in the tools parameter theres a different usage, it uses A-Z for all uppercase characters A to Z 
so likewise we will do
cat data.txt | tr -t [a-zA-Z] [n-za-mN-ZA-M] 
which will translate every a-z and A-Z character with N-Z, A-M and n-z, a-m
which will give us 
The password is 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu
which is password for bandit 12

Level 12
The level goal says
The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may 
be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and 
rename it using mv (read the manpages!)
created a folder at /tmp/
moved data.txt there
upon checking file type it showed simple file but as the description says its a dump file then we have to undump it, for which we will use xxd
xxd -r data.txt > undump
will give us the undumped file
again upon file checking it showed this
gzip compressed data, was "data2.bin", last modified: Thu May  7 18:14:30 2020, max compression, from Unix
so this is a gzip file repeatedly compressed
upon inspecting the gzip manual and multiple tries (it was giving unknown suffix) I found that zcat is actually doing something
zcat undump > undump2
and upon file type check it showed
bzip2 compressed data, block size = 900k
ok now we have to use bzip2, inspecting man pages :)
well 
bzip2 -d2 undump2
did the trick (-d for decompress and -2 for block size 900k)
but output was saved to undump2 due to unknown suffix or I should have used a flag :(
again check file type 
found again a gzip file
zcated it again and saved it in undump3
again checking file type revealed it as POSIX tar archive (what the F.....)
okay now looking for tar man pages .....
tar --extract -f undump3 did the trick
new file with data5.bin is shown
again its POSIX tar (F.....)
again untaring it got me data6.bin which is a bzip2 compressed file :`O
bzip gave me data6.bin.out again and its a POSIX tar (haaaaaa!!!!!)
untarring gave data8.bin which is a gzip file :===( originally data9.bin
zcat gave data9.bin and finally its a text
which says
The password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
which is password for bandit13
yeaaaaah!!!

For these level these commands will be used
ssh, telnet, nc, openssl, s_client, nmap

Level 13:
the goal says
The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don’t get the next 
password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are 
working on

upon reading the manuals of openssl and s_client, it is found that we can use the private key to connect to a pc if it is setup. so we got the private key
now just find a way to connect the same local host with different user (bandit14) as only bandit14 is able to read its password.
upon trying and failing with different switches and options found that
openssl s_client -connect 127.0.0.1:22 -key sshkey.private 
gives something like
CONNECTED(00000003)
140227959418944:error:1408F10B:SSL routines:ssl3_get_record:wrong version number:../ssl/record/ssl3_record.c:252:
---
no peer certificate available
---
No client certificate CA names sent
---
SSL handshake has read 5 bytes and written 176 bytes
Verification: OK
---
New, (NONE), Cipher is (NONE)
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : 0000
    Session-ID:
    Session-ID-ctx:
    Master-Key:
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    Start Time: 1653573278
    Timeout   : 7200 (sec)
    Verify return code: 0 (ok)
    Extended master secret: no
---

but it disconnects immediately and we have to find the way to issue commands
so I just found out that ssh command offers a -i switch that can be used to use private keys to connect
so
ssh -i sshkey.private bandit14@127.0.0.1 -p 22
port 22 as it is open internally, checked via nmap, 2220 doesn't work it is for firewall redirecting it to bandit (I think)
so we are in with bandit14 user
cat /etc/bandit_pass/bandit14
gave
4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
which is password for bandit14

Level 14:
the goal says
The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.

okay we can connect with ports or ips and send files via telnet or nc, lets try manuals
tried nc -l -p 30000 -c 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
-c to execute the string which is password and -l to listen anything but it stuck
tried the localhost 127.0.0.1 no result 
ommitting -l switch gave no destination, and no port to connect
tried 
 nc -p 30000 -c echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e 127.0.0.1
 but it says 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e: forward host lookup failed: No address associated with name
so I think I have to pipe the echo command
echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3enc | nc -p 30000
says no destination
echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3enc | nc  127.0.0.1 30000
says: Wrong! Please enter the correct current password
shit!!!!
I have been using the wrong password (me, slap on my head!!!)
 echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e | nc  127.0.0.1 30000  
gave 
Correct!
BfMYroe26WYalil77FoDi9qh59eK5xNr
which is password for next level bandit15

Level 15:
the goal says
The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.
Helpful note: Getting “HEARTBEATING” and “Read R BLOCK”? Use -ign_eof and read the “CONNECTED COMMANDS” section in the manpage. Next to ‘R’ and ‘Q’, 
the ‘B’ command also works in this version of that command…





